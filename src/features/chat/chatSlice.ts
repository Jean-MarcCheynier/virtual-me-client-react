import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { sendMessage } from './chatAPI';
import { I18NTextMessage } from '../../@types/message';
import { ITextMessage, IMessage } from '@virtual-me/virtual-me-ts-core';

export enum ChatLayout {
  BUBBLE='bubble',
  FLOATING='floating',
  FIXED='fixed'
}

export interface ChatState {
  messageList: IMessage<any>[];
  status: string;
  prevLayout: ChatLayout;
  layout: ChatLayout;
}

const initialState: ChatState = {
  messageList: [],
  status: 'idle',
  prevLayout: ChatLayout.FIXED,
  layout: ChatLayout.FIXED
};

// Delay the push of message into the list.
function sleep(ms: number | string) {
  return new Promise(resolve => setTimeout(resolve, ms as number));
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const sendMessageAsync = createAsyncThunk(
  'chat/sendMessage',
  async (message: ITextMessage, { getState, dispatch }) => {
    sendMessage({ message })
      .then(async response => {
        const messageList: IMessage<any>[] = response.data;
        for (let message of messageList) {
          dispatch(addMessage(message))
          if (message.delay) {
            let delaySecond = message.delay
            if (typeof delaySecond === "string")
              delaySecond = parseInt(delaySecond)
            await sleep(delaySecond * 1000)
            console.log("Delayed");
          }
        }
      })
      .catch(e => {
        if (e.response) {
          switch (e.response.status) {
            case 401:
              return [new I18NTextMessage("chat.form.error.unauthorized")]
            default:
              return [new I18NTextMessage("chat.form.error.default")]
          }
        } else {
          console.log(e);
          return [new I18NTextMessage("chat.form.error.connexion")]
        }
      })
      .finally(() => {
        dispatch(setStatus("idle"))
      })
    // The value we return becomes the `fulfilled` action payload
    return [];
  }
);



export const chatSlice = createSlice({
  name: 'chat',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLayout: (state, action) => {
      const prevLayout = state.layout;
      return { ...state, prevLayout: prevLayout, layout: action.payload }
    },
    restoreLayout: (state ) =>({...state, layout: state.prevLayout}),
    addMessage: (state, action) => {
      state.messageList = [...state.messageList, action.payload]
    },
    setStatus: (state, action) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(sendMessageAsync.pending, (state, { meta }) => {
        state.status = 'pending';
        state.messageList = [...state.messageList, meta.arg]
      })
      .addCase(sendMessageAsync.fulfilled, (state, action: PayloadAction<any>) => {
        //state.status = 'idle';
        //state.messageList = [...state.messageList, ...action.payload]
      })
      .addCase(sendMessageAsync.rejected, (state, action: PayloadAction<any>) => {
        state.status = 'error';
        state.messageList = [...state.messageList, ...action.payload]
      });
  },
});

export const selectMessageList = (state: RootState) => state.chat.messageList;
export const selectChatLayout = (state: RootState): ChatLayout => state.chat.layout;
export const selectSendingStatus = (state: RootState) => state.chat.status;

export const { setLayout, restoreLayout, addMessage, setStatus } = chatSlice.actions;
export default chatSlice.reducer;
