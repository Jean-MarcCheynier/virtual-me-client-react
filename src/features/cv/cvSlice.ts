import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getAll } from './cvAPI';
import { ICv } from '@virtual-me/virtual-me-ts-core';


export interface ICVState {
  list: ICv[]

}

const getInitialState: () => ICVState = () => {
  let state: ICVState = {
    list: []
  }
  return state;
};

export const getCvAsync = createAsyncThunk(
  'cv/all',
  async () => {
    const response = await getAll();
    return response.data;
  }
);

export const cvSlice = createSlice({
  name: 'cv',
  initialState: getInitialState(),
  reducers: {
    reset: () => getInitialState(),
    selectSkill: (state: any, action: PayloadAction<any>) => {
      const skillToSelect = action.payload;
      for (let cv of state.list) {
        for (let sk of cv.skills) {
          if (sk.name === skillToSelect.name) {
            sk.selected = !sk.selected
          }
        }
      }
      return state;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCvAsync.pending, (state, { meta }) => {
        return { ...state, status: 'loading' };
      })
      .addCase(getCvAsync.fulfilled, (state, action: PayloadAction<ICv[]>) => {
        state.list = action.payload;
        
        return state
      })
      .addCase(getCvAsync.rejected, (state, action: PayloadAction<any>) => {
        return { ...state, status: 'error', list: [] }
      });
  }
});

export const { reset, selectSkill } = cvSlice.actions;

export default cvSlice.reducer;
